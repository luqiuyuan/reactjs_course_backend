class ApplicationController < ActionController::API

  private

    # Translate error data from errors generated by models
    #
    # @param Model model
    #
    # @return [Array[Error]]
    def translateModelErrors(model)
      errors = []
      model.errors.details.each do |k,v|
        error = nil
        v.each do |e|
          if e[:error] == :blank
            error = Error.new("missing_field", k)
            break
          elsif e[:error] == :taken
            error = Error.new("duplicated_field", k)
            break
          elsif e[:error] == :conflict
            error = Error.new("conflict", k)
            break
          elsif e[:error] == :past
            error = Error.new("past", k)
            break
          elsif e[:error] == :not_consistent
            error = Error.new("not_consistent", k)
            break  
          elsif e[:error] == :not_a_number
            error = Error.new("not_a_number", k)
            break
          elsif e[:error] == :not_enough_storage_space
            error = Error.new("not_enough_storage_space", k)
          else
            if !error
              error = Error.new("invalid_field", k)
            end
          end
        end
        errors << error
      end
      errors
    end

    # Add prefix to field to let the field displayed have multiple levels
    #
    # @param [Array[Error]] errors
    # @param [String] prefix
    def add_prefix_to_field(errors, prefix)
      errors.each do |e|
        if e.field
          e.field = prefix + e.field.to_s
        end
      end
    end

    # Get user token parameters
    #
    # @return [Hash] if succeeded, nil if failed
    #
    # Comment:
    # 1. The method ActiveSupport::JSON.decode will be called only once no matter how many times the method user_token is called, since the resulting Hash will be stored in an instance variable
    # 2. The key-value pairs "user_id" and "key" might not exist
    #
    # Example:
    # {"user_id" => 1, "key" => "key"}
    # {"user_id" => 2}
    # {}
    #
    # Usage:
    # user_token['user_id']
    def user_token
      if @user_token_internal
        return @user_token_internal
      else
        if request.headers['HTTP_AUTHORIZATION']
          return @user_token_internal = (ActiveSupport::JSON.decode request.headers['HTTP_AUTHORIZATION'])['user_token']
        end
      end
    end

    # Authenticate user token
    def authenticate_user_token
      if user_token && user_token['user_id'] && user_token['key']
        if !UserToken.authenticate(user_token['user_id'], user_token['key'])
          @errors = []
          @errors << Error.new("invalid_user_token")
          render json: { errors: @errors }, status: :bad_request
        else # if user token authentication succeeded, refresh the token automatically
          UserToken.refresh(user_token['user_id'], user_token['key'])
        end
      else
        @errors = []
        @errors << Error.new("invalid_user_token")
        render json: { errors: @errors }, status: :bad_request
      end
    end

    def set_user_logged_in
      # If no logged-in user, user_token return nil
      if user_token.nil?
        @user_logged_in = nil
        return
      end

      @user_logged_in = User.find(user_token['user_id'])
    end

end
