class ApplicationController < ActionController::API

  private

    # Translate error data from errors generated by models
    #
    # @param Model model
    #
    # @return [Array[Error]]
    def translateModelErrors(model)
      errors = []
      model.errors.details.each do |k,v|
        error = nil
        v.each do |e|
          if e[:error] == :blank
            error = Error.new("missing_field", k)
            break
          elsif e[:error] == :taken
            error = Error.new("duplicated_field", k)
            break
          elsif e[:error] == :conflict
            error = Error.new("conflict", k)
            break
          elsif e[:error] == :past
            error = Error.new("past", k)
            break
          elsif e[:error] == :not_consistent
            error = Error.new("not_consistent", k)
            break  
          elsif e[:error] == :not_a_number
            error = Error.new("not_a_number", k)
            break
          elsif e[:error] == :not_enough_storage_space
            error = Error.new("not_enough_storage_space", k)
          else
            if !error
              error = Error.new("invalid_field", k)
            end
          end
        end
        errors << error
      end
      errors
    end

    # Add prefix to field to let the field displayed have multiple levels
    #
    # @param [Array[Error]] errors
    # @param [String] prefix
    def add_prefix_to_field(errors, prefix)
      errors.each do |e|
        if e.field
          e.field = prefix + e.field.to_s
        end
      end
    end

end
